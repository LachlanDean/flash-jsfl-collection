//Combine Textfields//Justin Putney//http://putney.ajarproductions.com//version 1.0.0var dom = fl.getDocumentDOM();fl.outputPanel.clear();var sortProp = "top";var sel = dom.selection;var selTextfields = new Array();var firstField;var uri = fl.scriptURI;var uArr = uri.split("/");uArr.pop();var uri = uArr.join("/");//fl.trace(uri);collectFields();if(selTextfields.length > 1) {	var xpanel = dom.xmlPanel(uri + "/Combine Textfields.xml");	var separator = xpanel["separator"];	sortProp = xpanel["sortby"];	//fl.trace("sort by..." + sortProp);	separator = replace(separator, '\\r', '\r');	separator = replace(separator, '\\n', '\n');			if(xpanel.dismiss == "accept") run();} else if (selTextfields.length == 1){		alert('You must select multiple textfields.');	}	else {		alert('No textfields were selected.');}function run(){		dom.selection = selTextfields; //select only textfields		//flip for sorting		if(sortProp == "bottom") dom.scaleSelection(1, -1);		if(sortProp == "right") dom.scaleSelection(-1, 1);		selTextfields.sort(sortFields);		//flip back		if(sortProp == "bottom") dom.scaleSelection(1, -1);		if(sortProp == "right") dom.scaleSelection(-1, 1);		combine(selTextfields);}//get all TFs //store themfunction collectFields(){	for(var i = 0; i < sel.length; i++){		var tSelection = sel[i]; 		if(tSelection == "[object Text]"){			selTextfields.push(tSelection);		}	}}function replace(searchStr, findStr, replaceStr){	//fl.trace('replacing...' + findStr + '...with...' + replaceStr + '...in: ' + searchStr);	var tArr = searchStr.split(findStr);	var returnStr = tArr.join(replaceStr);	return returnStr;}//sort themfunction sortFields(a,b) {	var tProp = sortProp;	if(tProp == "bottom") tProp = "top"; //use flipped values	if(tProp == "right") tProp = "left"; //use flipped values	var aN = parseInt(a[tProp]);	var bN = parseInt(b[tProp]);	var returnVal = aN - bN;	if(returnVal == 0) {		//second level sorting		if(tProp == "top") tProp = "left";		if(tProp == "left") tProp = "top";		if(tProp == "right") tProp = "top";		if(tProp == "bottom") tProp = "left";		aN = parseInt(a[tProp]);		bN = parseInt(b[tProp]);		returnVal = aN - bN;	}	return aN - bN;}//for testing onlyfunction traceFields(arr){	for(var i=0; i<arr.length; i++){		fl.trace(arr[i].getTextString());	}}function combine(arr){ //take 1st field, add each TF's text runs with attributes	var targField = arr.shift();	//fl.trace("combining to targField with content: " + targField.getTextString());	for(var i =0; i <arr.length; i++){		targField.setTextString(separator, targField.getTextString().length);		for(var j=0; j < arr[i].textRuns.length; j++) { //run through textruns for each field			var tRun = arr[i].textRuns[j];			var startPos = targField.getTextString().length;			targField.setTextString(separator, startPos);			startPos = targField.getTextString().length - separator.length;			targField.setTextString(tRun.characters, startPos, startPos+separator.length);			var endPos = targField.getTextString().length;			var tAttribs = tRun.textAttrs;			for(var attr in tAttribs){				var attrName = attr;				var attrValue = tAttribs[attr];				//if(attrValue != undefined) fl.trace('setting ' + attrName + ' attribute of ' + tRun.characters + ' to ' + attrValue);				if(attrValue != undefined && attr!= 'rotation') targField.setTextAttr(attrName, attrValue, startPos, endPos);			}//end attribute loop		}//end textrun loop			}	clearFields(targField, arr); //clean-up}function clearFields(newField, oldFields){	//fl.trace('clearing ' + oldFields.length + ' fields, saving field: ' + newField.getTextString());	dom.selectNone();	dom.selection = oldFields;	dom.deleteSelection();	dom.selection = [newField];}